name: AWIP Mission Control CI/CD - EMERGENCY FIX

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  security:
    name: Security & Vulnerability Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci --audit --fund=false
        npm audit --audit-level=moderate --production

    - name: Run security audit
      run: |
        npm audit --json > audit-report.json || true
        echo "Security audit completed"

    - name: CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        queries: security-and-quality

    - name: CodeQL Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: CodeQL Analysis Results
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:javascript"

    - name: Upload security artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          audit-report.json
        retention-days: 30

  test:
    name: Test & Validation
    runs-on: ubuntu-latest
    needs: security

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --fund=false

    - name: Lint code
      run: |
        npx eslint . --ext .js,.html --format stylish || true
        echo "Linting completed"

    - name: Validate HTML
      run: |
        # HTML validation for key files
        for file in index.html mobile*.html realtime-mobile.html ecosystem.html; do
          if [ -f "$file" ]; then
            echo "Validating $file"
            # Basic HTML structure validation
            if grep -q "<!DOCTYPE html>" "$file" && grep -q "</html>" "$file"; then
              echo "‚úì $file: Valid HTML structure"
            else
              echo "‚ö† $file: HTML structure issues detected"
            fi
          fi
        done

    - name: Test JavaScript syntax
      run: |
        # Syntax check for JS files
        for file in *.js; do
          if [ -f "$file" ]; then
            echo "Checking syntax: $file"
            node -c "$file" && echo "‚úì $file: Syntax OK" || echo "‚ö† $file: Syntax issues"
          fi
        done

    - name: Test configuration files
      run: |
        # Validate JSON configuration files
        for file in *.json; do
          if [ -f "$file" ]; then
            echo "Validating JSON: $file"
            python3 -m json.tool "$file" > /dev/null && echo "‚úì $file: Valid JSON" || echo "‚ö† $file: Invalid JSON"
          fi
        done

    - name: Performance check
      run: |
        # Basic performance metrics
        echo "Checking file sizes..."
        find . -name "*.html" -o -name "*.js" -o -name "*.css" | while read file; do
          size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null || echo "0")
          if [ "$size" -gt 1048576 ]; then  # 1MB
            echo "‚ö† Large file detected: $file ($size bytes)"
          else
            echo "‚úì $file: Size OK ($size bytes)"
          fi
        done

  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [security, test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Prepare deployment
      run: |
        # Ensure all required files are present
        echo "Preparing GitHub Pages deployment..."

        # Create _config.yml if not exists
        if [ ! -f "_config.yml" ]; then
          cat > _config.yml << EOF
        # AWIP Mission Control GitHub Pages Configuration
        title: AWIP Mission Control
        description: AI-powered Web Intelligence Platform Mission Control Dashboard
        baseurl: ""
        url: "https://cjaisingh.github.io"

        # Build settings
        markdown: kramdown
        highlighter: rouge

        # Exclude files
        exclude:
          - node_modules/
          - .github/
          - package*.json
          - README.md
          - "*.log"

        # Plugins
        plugins:
          - jekyll-sitemap
          - jekyll-feed
        EOF
        fi

        # Ensure index.html exists
        if [ ! -f "index.html" ]; then
          echo "ERROR: index.html not found!"
          exit 1
        fi

        echo "‚úì Deployment preparation complete"

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: '.'

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: Verify deployment
      run: |
        echo "üöÄ Deployment completed successfully!"
        echo "Site URL: ${{ steps.deployment.outputs.page_url }}"

        # Wait for deployment to be accessible
        sleep 30

        # Basic connectivity check
        if curl -s -f "${{ steps.deployment.outputs.page_url }}" > /dev/null; then
          echo "‚úì Site is accessible"
        else
          echo "‚ö† Site may not be immediately accessible (normal for new deployments)"
        fi

  notification:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
    - name: Report status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "üéâ AWIP Mission Control deployment successful!"
          echo "Dashboard URL: https://cjaisingh.github.io/awip-mission-control/"
        else
          echo "‚ùå Deployment failed - check logs above"
        fi
